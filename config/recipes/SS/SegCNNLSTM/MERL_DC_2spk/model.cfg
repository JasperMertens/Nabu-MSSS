[hyper]
model_names = main aux_lstm concat feedforward outlayer

[main]
#type of architecture
architecture = seg_cnn_lstm
#kernel t and f dimension
kernel_size= 5 5
#filters in first conv
num_filters=16
#list of nb of capsules per layer
#num_capsules_lst= 2 4 4 8 8 8 8 4 4 4 2 1
num_capsules_lst= 2 4 4 8 8 12 8 4 4 4 2 1
#list of capsule dimension per layer
#capsule_dim_lst= 16 16 32 32 64 32 32 32 16 16 16 16
capsule_dim_lst= 16 16 32 32 40 32 32 32 16 16 16 16
#Reduce the dimension every <rate> layers
t_reduction_rate=1
f_reduction_rate=1
#use capsule bias
use_bias=True
#share weights over input capsule types
shared=False
#use leaky softmax
leaky_softmax = False
#input noise standart deviation
input_noise = 0.2
#dropout rate (keep probability)
dropout = 1.0

[aux_lstm]
#type of architecture
architecture = dblstm
#number of neurons in the hidden layers
num_units = 20
#the number of neurons in layer l is num_units*(fac_per_layer**l)
fac_per_layer = 1.0
#number of hidden layers
num_layers = 2
#input noise standart deviation
input_noise = 0.2
#dropout rate (keep probability)
dropout = 1.0
#the recurrent dropout rate (keep probability)
recurrent_dropout = 1.0
#wheter layer normalization should be applied
layer_norm = False
#hidden unit activation
activation_fn = tanh

[concat]
#type of architecture
architecture = concat
# which inputs to concatenate
select_inputs = True True
# whether the 2 last dimensions should be flattened
flatten_last_2_dims = False False
# whether the a dimension should be expanded to match the shape of the first input
expand_dim_to_first_input = False True

[feedforward]
#type of architecture
architecture = feedforward
#the number of output dims
num_units = 400
#the number of neurons in layer l is num_units*(fac_per_layer**l)
fac_per_layer = 1.0
#number of hidden layers
num_layers = 1
#hidden unit activation
activation_func = relu
#input noise standart deviation
input_noise = 0
#dropout rate (keep probability)
dropout = 1.0

[outlayer]
#type of architecture
architecture = linear
#the number of output dims
output_dims = 20
#input noise standart deviation
input_noise = 0
#dropout rate (keep probability)
dropout = 1.0

